---
- name: Build health check URL
  ansible.builtin.set_fact:
    _hc_url: "{{ health_check.scheme }}://{{ health_check.host }}:{{ health_check.port }}{{ health_check.path }}"

# Optional grace period after reboot or service restarts
- name: Initial grace wait before probing (post-reboot cushion)
  ansible.builtin.wait_for:
    timeout: "{{ health_check.pre_tcp_wait | default(0) }}"
  when: (health_check.pre_tcp_wait | default(0)) | int > 0

# Make sure TCP port is open before HTTP checks
- name: Wait for TCP port to be reachable
  ansible.builtin.wait_for:
    host: "{{ health_check.host }}"
    port: "{{ health_check.port }}"
    timeout: "{{ (health_check.retries | int) * (health_check.delay | int) }}"
    state: started

# Probe the HTTP endpoint with retries
- name: HTTP GET health check
  ansible.builtin.uri:
    url: "{{ _hc_url }}"
    method: GET
    status_code: "{{ health_check.expect_status }}"
    return_content: true
    validate_certs: "{{ health_check.validate_certs | bool }}"
  register: _hc_result
  retries: "{{ health_check.retries | int }}"
  delay: "{{ health_check.delay | int }}"
  until:
    - _hc_result is succeeded
    - _hc_result.status == (health_check.expect_status | int)
    - (health_check.expect_regex | length == 0) or
      (_hc_result.content is regex(health_check.expect_regex))

# Nice summary in the output
- name: Print health check summary
  ansible.builtin.debug:
    msg:
      - "Health check URL: {{ _hc_url }}"
      - "HTTP status: {{ _hc_result.status }}"
      - "Body length: {{ (_hc_result.content | default('')) | length }}"
      - >-
        Body matched regex '{{ health_check.expect_regex }}':
        {{ (health_check.expect_regex | length > 0) and
           (_hc_result.content is regex(health_check.expect_regex)) }}
